// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview A Genkit flow for providing AI-driven recommendations on optimizing VM resource allocation.
 *
 * - optimizeVMResources - A function that returns optimization recommendations for VM resources.
 * - OptimizeVMResourcesInput - The input type for the optimizeVMResources function.
 * - OptimizeVMResourcesOutput - The return type for the optimizeVMResources function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const OptimizeVMResourcesInputSchema = z.object({
  vmId: z.string().describe('The ID of the virtual machine.'),
  currentCpu: z.number().describe('The current number of CPUs allocated to the VM.'),
  currentMemory: z.number().describe('The current amount of memory (in GB) allocated to the VM.'),
  cpuUsageHistory: z
    .array(z.number())
    .describe('An array of CPU usage percentages over a recent period.'),
  memoryUsageHistory: z
    .array(z.number())
    .describe('An array of memory usage percentages over a recent period.'),
  networkUsageHistory: z
    .array(z.number())
    .describe('An array of network usage percentages over a recent period.'),
  diskUsageHistory: z
    .array(z.number())
    .describe('An array of disk usage percentages over a recent period.'),
});
export type OptimizeVMResourcesInput = z.infer<typeof OptimizeVMResourcesInputSchema>;

const OptimizeVMResourcesOutputSchema = z.object({
  cpuRecommendation: z
    .number()
    .describe('Recommended number of CPUs for the VM based on usage patterns.'),
  memoryRecommendation: z
    .number()
    .describe('Recommended amount of memory (in GB) for the VM based on usage patterns.'),
  justification: z
    .string()
    .describe(
      'Explanation of why the recommendations were made, referencing usage history data.'
    ),
});
export type OptimizeVMResourcesOutput = z.infer<typeof OptimizeVMResourcesOutputSchema>;

export async function optimizeVMResources(input: OptimizeVMResourcesInput): Promise<
  OptimizeVMResourcesOutput
> {
  return optimizeVMResourcesFlow(input);
}

const prompt = ai.definePrompt({
  name: 'optimizeVMResourcesPrompt',
  input: {schema: OptimizeVMResourcesInputSchema},
  output: {schema: OptimizeVMResourcesOutputSchema},
  prompt: `You are an expert system administrator specializing in Proxmox virtualization.

  Based on the provided VM resource usage data, recommend optimal CPU and memory allocations.
  Explain your reasoning based on the provided data.

  VM ID: {{{vmId}}}
  Current CPU: {{{currentCpu}}}
  Current Memory (GB): {{{currentMemory}}}
  CPU Usage History (percentages): {{{cpuUsageHistory}}}
  Memory Usage History (percentages): {{{memoryUsageHistory}}}
  Network Usage History (percentages): {{{networkUsageHistory}}}
  Disk Usage History (percentages): {{{diskUsageHistory}}}

  Provide your recommendations in terms of cpuRecommendation and memoryRecommendation (in GB).
  Also, include a justification for your choices.
  Make sure CPU and memory recommendations are reasonable given the history provided.
  `,
});

const optimizeVMResourcesFlow = ai.defineFlow(
  {
    name: 'optimizeVMResourcesFlow',
    inputSchema: OptimizeVMResourcesInputSchema,
    outputSchema: OptimizeVMResourcesOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
